// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoListBackend.Data;

namespace ToDoListBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ToDoListBackend.Models.Account", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.HasKey("username");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ToDoListBackend.Models.ToDoItem", b =>
                {
                    b.Property<string>("itemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToDoListlistId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<string>("contentHeight")
                        .HasColumnType("TEXT");

                    b.Property<string>("deleteHeight")
                        .HasColumnType("TEXT");

                    b.Property<bool>("important")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("lastNotified")
                        .HasColumnType("TEXT");

                    b.Property<string>("owner")
                        .HasColumnType("TEXT");

                    b.Property<string>("parentListId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("timeRemind")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("itemId");

                    b.HasIndex("ToDoListlistId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ToDoListBackend.Models.ToDoList", b =>
                {
                    b.Property<string>("listId")
                        .HasColumnType("TEXT");

                    b.Property<string>("deleteHeight")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ownerUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timeCreate")
                        .HasColumnType("TEXT");

                    b.HasKey("listId");

                    b.HasIndex("ownerUsername");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("ToDoListBackend.Models.ToDoItem", b =>
                {
                    b.HasOne("ToDoListBackend.Models.ToDoList", null)
                        .WithMany("items")
                        .HasForeignKey("ToDoListlistId");
                });

            modelBuilder.Entity("ToDoListBackend.Models.ToDoList", b =>
                {
                    b.HasOne("ToDoListBackend.Models.Account", "owner")
                        .WithMany("lists")
                        .HasForeignKey("ownerUsername");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("ToDoListBackend.Models.Account", b =>
                {
                    b.Navigation("lists");
                });

            modelBuilder.Entity("ToDoListBackend.Models.ToDoList", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
